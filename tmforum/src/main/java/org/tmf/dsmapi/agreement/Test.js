/**
 * Created by atinsingh on 6/30/17.
 */
"tests": "var dataOut = JSON.parse(responseBody);\n\ntests[\"Content-Type is present \" + postman.getResponseHeader(\"Content-type\")] = postman.getResponseHeader(\"Content-type\");\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\ntests[\"Response contains ID \" + dataOut.id.toString()] = dataOut.id.toString() !== \"\";\n\ntests[\"Response contains HREF\" ] = dataOut.href.toString() !== \"\";\n\npostman.setGlobalVariable(\"ID2\", dataOut.id.toString());\n\npostman.setGlobalVariable(\"lastResponse\" + postman.getEnvironmentVariable(\"testName\"), dataOut);\npostman.setGlobalVariable(\"lastRequest\"+ postman.getEnvironmentVariable(\"testName\"), request.data );\n\nvar dataIn = JSON.parse(request.data);\n\n\nconsole.log(\"request \" + dataIn);\nconsole.log(\"request type\" + typeof(dataIn));\n\nif( typeof(dataOut.serviceQualificationItem) !== 'undefined' && dataOut.serviceQualificationItem.length > 0) {\n    var items = dataOut.serviceQualificationItem;\n    for(var i = 0; i < items.length; i++) {\n        tests[\"Response contains service \"] = typeof(items[i].service) !== 'undefined';\n        validateService(items[i].service);\n        \n        tests[\"Response serviceQualificationItem contains availability\"+ items[i].availability.toString()] = items[i].availability.toString() !== \"\";\n        tests[\"Response serviceQualificationItem contains serviceabilityDate \"+ items[i].serviceabilityDate.toString()] = items[i].serviceabilityDate.toString() !== \"\";\n        validate(dataIn.serviceQualificationItem[0].service, items[i].service);\n    }\n}\n\nfunction validateService(service) {\n    if(\"No\" === dataIn.provideAlternative) {\n        tests[\"Response service contains serviceCharacteristic \"] = typeof(service.serviceCharacteristic) !== 'undefined';\n        validateServiceCharacteristic(service.serviceCharacteristic);\n    }\n    \n    tests[\"Response service contains serviceSpecification \"] = typeof(service.serviceSpecification) !== 'undefined';\n    validateServiceSpecification(service.serviceSpecification);\n    \n  \n}\n\nfunction validateServiceCharacteristic(serviceCharacteristic) {\n    for(var i = 0; i < serviceCharacteristic.length; i++ ) {\n        tests[\"Response serviceCharacteristic contains name \"+ serviceCharacteristic[i].name] = true;\n        tests[\"Response serviceCharacteristic contains value \"+ serviceCharacteristic[i].value] = true;\n    }\n   \n}\n\nfunction validateServiceSpecification(serviceSpecification) {\n    tests[\"Response serviceSpecification contains id \"+ serviceSpecification.id.toString()] =serviceSpecification.id.toString() !== \"\";\n    tests[\"Response serviceSpecification contains href \"+ serviceSpecification.href.toString()] = serviceSpecification.href.toString() !== \"\";\n    tests[\"Response serviceSpecification contains serviceCategoryId \"+ serviceSpecification.serviceCategoryId.toString()] = serviceSpecification.serviceCategoryId.toString() !== \"\";\n}\n\n\ntests[\"POST Body Response provideAlternative equals Request provideAlternative\"  ] = objectEquals(dataIn.provideAlternative, dataOut.provideAlternative);\ntests[\"POST Body Response provideOnlyEligible equals Request provideOnlyEligible\"  ] = objectEquals(dataIn.provideOnlyEligible, dataOut.provideOnlyEligible);\ntests[\"POST Body Response Address equals Request Address\"  ] = objectEquals(dataIn.address, dataOut.address);\ntests[\"Response contains eligibilityDate \" + dataOut.eligibilityDate.toString()] = dataOut.eligibilityDate.toString() !== \"\";\n\n\nfunction validate(inService, outService) {\n        \n    tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceCharacteristic, outService.serviceCharacteristic);\n    \n    if( typeof(dataIn.provideAlternative && inService.serviceSpecification) !== 'undefined' ) {\n        tests[\"POST Body Response serviceSpecification equals Request serviceSpecification\"  ] = objectEquals(inService.serviceSpecification, outService.serviceSpecification);\n        \n        if(\"No\" === dataIn.provideAlternative && inService.serviceSpecification.serviceCategoryId === \"internetService\") {\n            tests[\"Serivce qualification\"] = internetServiceQualification(inService.serviceCharacteristic, outService.serviceSpecification.serviceSpecificationCharacteristic);\n        }\n    }\n\n}\n\nfunction internetServiceQualification(inAttrs, outAttrs) {\n    // tests[\"inAttrs: \" + JSON.stringify(inAttrs)] = true;\n    \n    // tests[\" outAttrs: \" + JSON.stringify(outAttrs) ] = true;\n    \n    // tests[\"dataIn.provideAlternative: \" + dataIn.provideAlternative] = true;\n    \n    if( dataIn.provideAlternative === \"No\") {\n        \n        for(var i = 0; i < inAttrs.length; i++) {\n            for(var j = 0; j < outAttrs.length; j++) {\n                if(inAttrs[i].name == outAttrs[j].name) {\n                    \n                    // tests[\"inAttrs: \" + JSON.stringify(inAttrs[i])] = true;\n                    // tests[\"outAttrs: \" + JSON.stringify(outAttrs[j])] = true;\n\n                    retIn  = convertDataUnit(inAttrs[i].value);\n                    retOut = convertDataUnit(outAttrs[j].valueto);\n                    \n                    // tests[\"retIn: \" + JSON.stringify(retIn)] = true;\n                    // tests[\"retOut: \" + JSON.stringify(retOut)] = true;\n                    \n                    if(retIn.value <= retOut.value) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction convertDataUnit(dataStr) {\n    // tests[\"dataStr:\" + dataStr] = true;\n    var data = {};\n    data.unit = \"KBPS\";\n    \n    unit = dataStr.substr(-4, 4);\n    value = dataStr.substr(0, dataStr.length-4);\n    //tests[\"unit: \" + unit.toString() + \",value:\" + value.toString() + \",data:\" + dataStr.toString()] = true;\n    if(unit.substr(0,1) === \"K\") {\n        data.value = parseInt(value);\n    } else if(unit.substr(0,1) === \"M\") {\n        data.value = parseInt(value) * 1000;\n    } else if(unit.substr(0,1) === \"G\") {\n        data.value = parseInt(value) * 1000 * 1000;\n    }\n    return data;\n}\n\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n         console.log(\"property typeof(v1) !==typeof(v2)\" + typeof(v1)  + typeof(v2) + \"==>\" + v1 + \"!=\" + v2);\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n       \n        var r = true;\n        for (var k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            \n            if (!r) {\n                 tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]] = false;\n                 console.log(\"property \" + k.toString() + \"==>\" + v1[k] + \"!=\" + v2[k]);\n                 postman.setGlobalVariable(\"unequal\" +  k.toString(), v1[k] + \"!=\" + v2[k]);\n                \n                return false;\n            } else {\n                 //tests[\"property \" + k.toString() + \"==>\" + v1[k] + \"=\" + v2[k]] = true;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n",
